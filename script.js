const heartsContainer = document.querySelector('.hearts-background');
const colors = ['#ff4d4d', '#ff7f50', '#ff69b4', '#ff1493', '#ff4500', '#ff6347'];

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–¥–µ—á–µ–∫
function createHeart() {
    const heart = document.createElement('div');
    heart.classList.add('heart-background');
    heart.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
    heart.style.left = Math.random() * 100 + 'vw';
    heart.style.animationDuration = Math.random() * 3 + 2 + 's';
    heartsContainer.appendChild(heart);
    
    setTimeout(() => heart.remove(), 5000);
}

// –ü–∞–¥–∞—é—â–∏–µ —Å–µ—Ä–¥–µ—á–∫–∏ –∫–∞–∂–¥—ã–µ 150 –º—Å
setInterval(createHeart, 150);

// –ú—É–∑—ã–∫–∞
const music = document.getElementById('background-music');
const musicButton = document.getElementById('music-button');

musicButton.addEventListener('click', () => {
    if (music.paused) {
        music.play();
        musicButton.textContent = 'üéµ –í—ã–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
        startAudioVisualization();  // –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º—É–∑—ã–∫–∏
    } else {
        music.pause();
        musicButton.textContent = 'üéµ –í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É';
    }
});

// –°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ
const heart = document.querySelector('.heart');
function syncHeartbeat() {
    heart.style.animation = 'none';
    heart.offsetHeight;
    heart.style.animation = 'heartbeat 1s infinite';
}
setInterval(syncHeartbeat, 1000);

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ (–∞–Ω–∏–º–∞—Ü–∏—è "—à–∞—Ä–æ–≤–æ–π –º–æ–ª–Ω–∏–∏")
function startAudioVisualization() {
    const sphere = document.querySelector('.pulse-sphere');
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    const source = audioCtx.createMediaElementSource(music);
    const analyser = audioCtx.createAnalyser();

    source.connect(analyser);
    analyser.connect(audioCtx.destination);
    analyser.fftSize = 256;

    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    function animate() {
        analyser.getByteFrequencyData(dataArray);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        const volume = dataArray.reduce((a, b) => a + b) / bufferLength;
        const scale = 1 + (volume / 128);  // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã

        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å—Ñ–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        const hue = 280 - (volume / 2);  // –¶–≤–µ—Ç –æ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ (280deg) –∫ —Ä–æ–∑–æ–≤–æ–º—É (330deg)

        sphere.style.transform = `scale(${scale})`;
        sphere.style.background = `radial-gradient(circle, hsl(${hue}, 100%, 70%), transparent)`;

        requestAnimationFrame(animate);
    }

    animate();
}
